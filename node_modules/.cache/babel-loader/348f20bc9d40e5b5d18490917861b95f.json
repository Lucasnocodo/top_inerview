{"ast":null,"code":"var _jsxFileName = \"/Users/chenyuda/Documents/top-interview/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport History from './components/History';\nimport getWeather from './apis/getWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initResultState = {\n  description: '',\n  main_description: '',\n  humidity: -1,\n  temp_max: -1,\n  temp_min: -1,\n  dateTime: ''\n};\n\nfunction App() {\n  _s();\n\n  console.log('main render');\n  const [result, setResult] = useState(initResultState);\n  const [isLoading, setIsLoading] = useState(false);\n  const [init, setInit] = useState(true);\n\n  const dataParser = data => {\n    const {\n      weather,\n      main,\n      sys,\n      name,\n      cod\n    } = data;\n    const {\n      description,\n      main: main_description\n    } = weather[0];\n    const {\n      humidity,\n      temp_max,\n      temp_min\n    } = main;\n    const {\n      country\n    } = sys;\n    const dateTime = new Date().toLocaleString();\n    return {\n      city: name,\n      country,\n      description,\n      main_description,\n      humidity,\n      temp_max,\n      temp_min,\n      dateTime,\n      cod\n    };\n  };\n\n  const handleSearch = (city, country) => {\n    setIsLoading(true);\n    getWeather(city, country).then(res => {\n      setIsLoading(false);\n      setResult(dataParser(res.data));\n      localStorage.setItem(`data_${Date.now()}`, JSON.stringify({ ...dataParser(res.data),\n        city,\n        country\n      }));\n    }).catch(err => {\n      const {\n        cod,\n        message\n      } = err.response.data;\n      setResult({\n        cod,\n        message\n      });\n      setIsLoading(false);\n    });\n    setInit(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      result: result,\n      handleSearch: handleSearch,\n      init: init,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      setResult: setResult,\n      handleSearch: handleSearch,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1wvE5vhvX31Zvf+EQlGYkDuCYmo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chenyuda/Documents/top-interview/src/App.js"],"names":["React","useState","Header","Search","History","getWeather","initResultState","description","main_description","humidity","temp_max","temp_min","dateTime","App","console","log","result","setResult","isLoading","setIsLoading","init","setInit","dataParser","data","weather","main","sys","name","cod","country","Date","toLocaleString","city","handleSearch","then","res","localStorage","setItem","now","JSON","stringify","catch","err","message","response"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport History from './components/History';\nimport getWeather from './apis/getWeather'\n\nconst initResultState = { description: '', main_description: '', humidity: -1, temp_max: -1, temp_min: -1, dateTime: '' }\n\nfunction App() {\n  console.log('main render')\n  const [result, setResult] = useState(initResultState)\n  const [isLoading, setIsLoading] = useState(false)\n  const [init, setInit] = useState(true)\n\n  const dataParser = (data) => {\n    const { weather, main, sys, name, cod } = data\n    const { description, main: main_description } = weather[0]\n    const { humidity, temp_max, temp_min } = main\n    const { country } = sys\n    const dateTime = new Date().toLocaleString()\n    return { city: name, country, description, main_description, humidity, temp_max, temp_min, dateTime, cod }\n  }\n\n  const handleSearch = (city, country) => {\n    setIsLoading(true)\n    getWeather(city, country)\n      .then((res) => {\n        setIsLoading(false)\n        setResult(dataParser(res.data))\n        localStorage.setItem(`data_${Date.now()}`, JSON.stringify({ ...dataParser(res.data), city, country }))\n      }).catch((err) => {\n        const { cod, message } = err.response.data\n        setResult({ cod, message })\n        setIsLoading(false)\n      });\n    setInit(false)\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search\n        result={result}\n        handleSearch={handleSearch}\n        init={init}\n        isLoading={isLoading} />\n      <History\n        setResult={setResult}\n        handleSearch={handleSearch}\n        result={result}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}